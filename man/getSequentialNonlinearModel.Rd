% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getSequentialNonlinearModel.R
\name{getSequentialNonlinearModel}
\alias{getSequentialNonlinearModel}
\title{getSequentialNonlinearModel}
\usage{
getSequentialNonlinearModel(y, x, D, L, lambda, gamma_init, alpha2_init,
  spconfig, spaTol_gamma, shrinkStepSize, moveSize, ...)
}
\arguments{
\item{y}{vector}

\item{x}{the reuslt from getPreprocess \code{x}}

\item{D}{columns of original X}

\item{L}{maximize lag number}

\item{lambda}{the LASSO penalty}

\item{gamma_init}{the initial value for gamma}

\item{alpha2_init}{the initial value of EM decomposition parameter, refer to the paper}

\item{spconfig}{spline configuration}

\item{spaTol_gamma}{favor smaller gamma within spaTol_c tolerance}

\item{shrinkStepSize}{adjust gamma before they get too crazy}

\item{moveSize}{multipler to move among channels}

\item{...}{default parameters,including
 \itemize{
  \item testSize: the number of obs to average prediction error, default is 50
  \item tol_idle_alpha2:increase alpha2 if it idles for a while
  \item safeShrink_gamma : adjust gamma before they get too crazy
  \item tol_all0times: if coefficents are all 0 for too long time, shrink gamma
  \item shrinkAlpha2 ：how to shrink alpha2 if it's too big
}}
}
\value{
a list including
 \itemize{
  \item preErr: historical predicted error, firt column indicates the first channel, etc.
  \item predict1 : historical predicted values, firt column indicates the first channel, etc.
  \item gamma_history : historical gamma channels, first channel is the smallest one and the third channel is the largest one.
  \item gamma_opt: optimized gamma, the second channel in gamma_history
  \item alpha_opt ：optimized alpha.
  \item beta_opt: best coefficient, the last row and the second channel related in beta_history
  \item beta_history: all stored coefficient.
}
}
\description{
This model is used to fit sequential non linear time series data. Detailed information could be find in the paper \url{http://jding.org/jie-uploads/2018/11/slant.pdf}
}
\details{
This function is to fit seqential non linear model
}
\examples{
utils.lag <- function(ts, lag = 1, pad = NA) {
# return the lagged version of a time series vector
return(c(rep(pad, lag), ts[1:(length(ts)-lag)]))
}
# pack configurations so that it is easier to bundle things together
Ex1 <- (function(N=2000, D=2, L=8, ifPlot = TRUE){
 err <- matrix(stats::rnorm(D*(N+L)), N+L, D)
 X <- err[ ,1]
 X <- cbind(X, 0.5 * utils.lag(X,1)^2 - 0.8 * utils.lag(X,7) + 0.2 * err[,2])
 if (ifPlot) {
   graphics::plot(X[,1], X[,2], pch = 16, cex = 0.5, col = "red")
 }
 list(N=N, D=D, L=L, X=X[-(1:L),], y=X[-(1:L),2])
})()

Ex1_algo <- (function(experiment_config){
ec <- experiment_config # short name
lambda <- 1/c(1:ec$N) # same as batch
shrinkStepSize <- 1/c(1:ec$N)
list(
  order = 3,
  nBspline = 10,
  lambda = lambda,
  shrinkStepSize = shrinkStepSize,
  # if the performance does not exceed this ratio, the sparser (larger gamma) is preferred
  spaTol_gamma = 1.01,
  moveSize = 10^(0.4), # multipler to move among channels
 safeShrink_gamma = 10^(0.1), # to adjust gamma before they get too crazy
  gamma_init = 0.01,
  alpha2_init = 0.05
)
})(Ex1)

Ex1_algo <- c(Ex1_algo, do.call(getPreprocess, c(Ex1, Ex1_algo)))

Ex1_result <- do.call(getSequentialNonlinearModel, c(list(ifPrint=1, testSize=50),Ex1, Ex1_algo))
#========diagonistic========
graphics::plot(Ex1_result$gamma_opt,type = "l")
graphics::plot(Ex1_result$alpha_opt,type = "l",ylab = "Tao2")
graphics::plot(Ex1_result$preErr[,2],type = "l")
#get the historical opt beta, always the middle channel
plotcoeff(Ex1_result$beta_opt,Ex1_algo$knots,Ex1_algo$nBspline)
}
\seealso{
\code{\link{glasso_EM}} for implementation of EM algorithm; \code{\link{getPreprocess}};\code{\link{getRegressor}}
}
\keyword{linear}
\keyword{model}
\keyword{non}
\keyword{sequential}
\keyword{series}
\keyword{time}
